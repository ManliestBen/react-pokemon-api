{"version":3,"sources":["services/pokemon-api.js","pages/PokemonPage/PokemonPage.jsx","App.js","serviceWorker.js","index.js"],"names":["BASE_URL","PokemonPage","state","pokemon","index","parseInt","this","props","match","params","idx","fetch","mode","then","res","json","console","log","setState","className","name","height","src","sprites","front_default","alt","types","map","type","base_experience","weight","abilities","ability","stats","base_stat","to","Component","App","getPokemon","results","exact","path","render","key","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b19c93c.chunk.js","sourcesContent":["const BASE_URL = 'https://pokeapi.co/api/v2/pokemon/';\n\nexport function getAllPokemon() {\n    return fetch(`${BASE_URL}?limit=1000`, {mode: \"cors\"})\n    .then(res => res.json());\n}\n\nexport function getPokemonDetails(idx) {\n    return fetch(`${BASE_URL}${idx}`, {mode: \"cors\"})\n    .then(res => res.json());\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './PokemonPage.css';\nimport { getPokemonDetails } from '../../services/pokemon-api';\n\n\nclass PokemonPage extends Component {\n    state = {\n        pokemon: []\n    };\n\n    async componentDidMount() {\n        const index = parseInt(this.props.match.params.idx) + 1;\n        const pokemon = await getPokemonDetails(index);\n        console.log(pokemon);\n        this.setState({ pokemon: pokemon });\n    }\n\n    render() {\n        return (\n            <div className='PokemonPage'>\n                {this.state.pokemon.name ?\n                    <>\n                    <div className='PokemonPage-image'>\n                        <span><img height=\"250\" src={this.state.pokemon.sprites.front_default} alt=\"\"/></span><br/>\n                    </div>\n                    <div className='PokemonPage-pokemon'>\n                        <span>Name:</span>\n                        <span>{this.state.pokemon.name}</span>\n                        <span>Type(s):</span>\n                        <span>\n                            {this.state.pokemon.types.map((type) =>\n                                <div>{type.type.name}</div>\n                            )}\n                        </span>\n                        <span>Base Experience:</span>\n                        <span>{this.state.pokemon.base_experience}</span>\n                        <span>Height:</span>\n                        <span>{this.state.pokemon.height}</span>\n                        <span>Weight:</span>\n                        <span>{this.state.pokemon.weight}</span>\n                        <span>Abilities:</span>\n                        <span>\n                            {this.state.pokemon.abilities.map((ability) =>\n                                <div>{ability.ability.name}</div>\n                            )}\n                        </span>\n                        <span>Speed:</span>\n                        <span>{this.state.pokemon.stats[0].base_stat}</span>\n                        <span>Special-Defense:</span>\n                        <span>{this.state.pokemon.stats[1].base_stat}</span>\n                        <span>Special-Attack:</span>\n                        <span>{this.state.pokemon.stats[2].base_stat}</span>\n                        <span>Defense:</span>\n                        <span>{this.state.pokemon.stats[3].base_stat}</span>\n                        <span>Attack:</span>\n                        <span>{this.state.pokemon.stats[4].base_stat}</span>\n                        <span>HP:</span>\n                        <span>{this.state.pokemon.stats[5].base_stat}</span>\n                        <Link to='/'>Back to List</Link>\n                    </div>\n                    </>\n                    :\n                    <h3>Loading...</h3>\n                }\n            </div>\n        )\n    }\n}\n\nexport default PokemonPage;","import React, { Component } from 'react';\nimport './App.css';\nimport { Route, Switch, Link } from 'react-router-dom';\nimport { getAllPokemon } from './services/pokemon-api';\nimport PokemonPage from './pages/PokemonPage/PokemonPage';\n\nclass App extends Component {\n  state = {\n    pokemon: []\n  };\n\n  getPokemon = (idx) => {\n    return this.state.pokemon[idx];\n  }\n\n  async componentDidMount() {\n    const pokemon = await getAllPokemon();\n    console.log(pokemon.results);\n    this.setState({ pokemon: pokemon.results });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">Pokemon Index</header>\n        <Switch>\n        <Route exact path='/' render={() => \n            <section>\n              {this.state.pokemon.map((pokemon, idx) => \n                <Link\n                  to={`/pokemon/${idx}`}\n                  key={pokemon.name}\n                >\n                  {pokemon.name}\n                </Link>\n              )}\n            </section>\n          }/>\n          <Route path='/pokemon/:idx' render={(props) => \n            <PokemonPage\n              {...props}\n              getPokemon={this.getPokemon}\n            />\n          }/>\n          </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>    \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}